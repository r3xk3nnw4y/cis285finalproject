<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RectpackSharp</name>
    </assembly>
    <members>
        <member name="T:RectpackSharp.PackingHints">
            <summary>
            Specifies hints that help optimize the rectangle packing algorithm. 
            </summary>
        </member>
        <member name="F:RectpackSharp.PackingHints.TryByArea">
            <summary>Tells the rectangle packer to try inserting the rectangles ordered by area.</summary>
        </member>
        <member name="F:RectpackSharp.PackingHints.TryByPerimeter">
            <summary>Tells the rectangle packer to try inserting the rectangles ordered by perimeter.</summary>
        </member>
        <member name="F:RectpackSharp.PackingHints.TryByBiggerSide">
            <summary>Tells the rectangle packer to try inserting the rectangles ordered by bigger side.</summary>
        </member>
        <member name="F:RectpackSharp.PackingHints.TryByWidth">
            <summary>Tells the rectangle packer to try inserting the rectangles ordered by width.</summary>
        </member>
        <member name="F:RectpackSharp.PackingHints.TryByHeight">
            <summary>Tells the rectangle packer to try inserting the rectangles ordered by height.</summary>
        </member>
        <member name="F:RectpackSharp.PackingHints.TryByPathologicalMultiplier">
            <summary>Tells the rectangle packer to try inserting the rectangles ordered by a pathological multiplier.</summary>
        </member>
        <member name="F:RectpackSharp.PackingHints.FindBest">
            <summary>Specifies to try all the possible hints, as to find the best packing configuration.</summary>
        </member>
        <member name="F:RectpackSharp.PackingHints.UnusualSizes">
            <summary>Specifies hints to optimize for rectangles who have one side much bigger than the other.</summary>
        </member>
        <member name="F:RectpackSharp.PackingHints.MostlySquared">
            <summary>Specifies hints to optimize for rectangles whose sides are relatively similar.</summary>
        </member>
        <member name="T:RectpackSharp.PackingHintExtensions">
            <summary>
            Provides internal values and functions used by the rectangle packing algorithm.
            </summary>
        </member>
        <member name="T:RectpackSharp.PackingHintExtensions.GetSortKeyDelegate">
            <summary>
            Represents a method for calculating a sort key from a <see cref="T:RectpackSharp.PackingRectangle"/>.
            </summary>
            <param name="rectangle">The <see cref="T:RectpackSharp.PackingRectangle"/> whose sort key to calculate.</param>
            <returns>The value that should be assigned to <see cref="F:RectpackSharp.PackingRectangle.SortKey"/>.</returns>
        </member>
        <member name="F:RectpackSharp.PackingHintExtensions.MaxHintCount">
            <summary>The maximum amount of hints that can be specified by a <see cref="!:PackingHint"/>.</summary>
        </member>
        <member name="M:RectpackSharp.PackingHintExtensions.GetFlagsFrom(RectpackSharp.PackingHints,System.Span{RectpackSharp.PackingHints}@)">
            <summary>
            Separates a <see cref="!:PackingHint"/> into the multiple options it contains,
            saving each of those separately onto a <see cref="T:System.Span`1"/>.
            </summary>
            <param name="packingHint">The <see cref="!:PackingHint"/> to separate.</param>
            <param name="span">The span in which to write the resulting hints. This span's excess will be sliced.</param>
        </member>
        <member name="M:RectpackSharp.PackingHintExtensions.SortByPackingHint(RectpackSharp.PackingRectangle[],RectpackSharp.PackingHints)">
            <summary>
            Sorts the given <see cref="T:RectpackSharp.PackingRectangle"/> array using the specified <see cref="!:PackingHint"/>.
            </summary>
            <param name="rectangles">The rectangles to sort.</param>
            <param name="packingHint">The hint to sort by. Must be a single bit value.</param>
            <remarks>
            The <see cref="F:RectpackSharp.PackingRectangle.SortKey"/> values will be modified.
            </remarks>
        </member>
        <member name="T:RectpackSharp.PackingRectangle">
            <summary>
            A rectangle that can be used for a rectangle packing operation.
            </summary>
        </member>
        <member name="F:RectpackSharp.PackingRectangle.Id">
            <summary>
            A value that can be used to identify this <see cref="T:RectpackSharp.PackingRectangle"/>. This value is
            never touched by the rectangle packing algorithm.
            </summary>
        </member>
        <member name="F:RectpackSharp.PackingRectangle.SortKey">
            <summary>A value used internally by the packing algorithm for sorting rectangles.</summary>
        </member>
        <member name="F:RectpackSharp.PackingRectangle.X">
            <summary>The X coordinate of the left edge of this <see cref="T:RectpackSharp.PackingRectangle"/>.</summary>
        </member>
        <member name="F:RectpackSharp.PackingRectangle.Y">
            <summary>The Y coordinate of the top edge of this <see cref="T:RectpackSharp.PackingRectangle"/>.</summary>
        </member>
        <member name="F:RectpackSharp.PackingRectangle.Width">
            <summary>The width of this <see cref="T:RectpackSharp.PackingRectangle"/>.</summary>
        </member>
        <member name="F:RectpackSharp.PackingRectangle.Height">
            <summary>The height of this <see cref="T:RectpackSharp.PackingRectangle"/>.</summary>
        </member>
        <member name="P:RectpackSharp.PackingRectangle.Right">
            <summary>
            Gets or sets the X coordinate of the right edge of this <see cref="T:RectpackSharp.PackingRectangle"/>.
            </summary>
            <remarks>Setting this will only modify the <see cref="F:RectpackSharp.PackingRectangle.Width"/>.</remarks>
        </member>
        <member name="P:RectpackSharp.PackingRectangle.Bottom">
            <summary>
            Gets or sets the Y coordinate of the bottom edge of this <see cref="T:RectpackSharp.PackingRectangle"/>.
            </summary>
            <remarks>Setting this will only modify the <see cref="F:RectpackSharp.PackingRectangle.Height"/>.</remarks>
        </member>
        <member name="P:RectpackSharp.PackingRectangle.Area">
            <summary>Calculates this <see cref="T:RectpackSharp.PackingRectangle"/>'s area.</summary>
        </member>
        <member name="P:RectpackSharp.PackingRectangle.Perimeter">
            <summary>Calculates this <see cref="T:RectpackSharp.PackingRectangle"/>'s perimeter.</summary>
        </member>
        <member name="P:RectpackSharp.PackingRectangle.BiggerSide">
            <summary>Gets this <see cref="T:RectpackSharp.PackingRectangle"/>'s bigger side.</summary>
        </member>
        <member name="P:RectpackSharp.PackingRectangle.PathologicalMultiplier">
            <summary>Calculates this <see cref="T:RectpackSharp.PackingRectangle"/>'s pathological multiplier.</summary>
            <remarks>This is calculated as: <code>max(width, height) / min(width, height) * width * height</code></remarks>
        </member>
        <member name="M:RectpackSharp.PackingRectangle.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Creates a <see cref="T:RectpackSharp.PackingRectangle"/> with the specified values.
            </summary>
        </member>
        <member name="M:RectpackSharp.PackingRectangle.#ctor(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Creates a <see cref="T:RectpackSharp.PackingRectangle"/> from a <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
        </member>
        <member name="M:RectpackSharp.PackingRectangle.Contains(RectpackSharp.PackingRectangle@)">
            <summary>
            Returns whether the given <see cref="T:RectpackSharp.PackingRectangle"/> is contained
            entirely within this <see cref="T:RectpackSharp.PackingRectangle"/>.
            </summary>
        </member>
        <member name="M:RectpackSharp.PackingRectangle.Intersects(RectpackSharp.PackingRectangle@)">
            <summary>
            Returns whether the given <see cref="T:RectpackSharp.PackingRectangle"/> intersects with
            this <see cref="T:RectpackSharp.PackingRectangle"/>.
            </summary>
        </member>
        <member name="M:RectpackSharp.PackingRectangle.Intersection(RectpackSharp.PackingRectangle@)">
            <summary>
            Calculates the intersection of this <see cref="T:RectpackSharp.PackingRectangle"/> with another.
            </summary>
        </member>
        <member name="M:RectpackSharp.PackingRectangle.CompareTo(RectpackSharp.PackingRectangle)">
            <summary>
            Compares this <see cref="F:RectpackSharp.PackingRectangle.SortKey"/> with another <see cref="T:RectpackSharp.PackingRectangle"/>'s.
            </summary>
        </member>
        <member name="T:RectpackSharp.RectanglePacker">
            <summary>
            A static class providing functionality for packing rectangles into a bin as small as possible.
            </summary>
        </member>
        <member name="F:RectpackSharp.RectanglePacker.oldListReference">
            <summary>A weak reference to the last list used, so it can be reused in subsequent packs.</summary>
        </member>
        <member name="M:RectpackSharp.RectanglePacker.Pack(RectpackSharp.PackingRectangle[],RectpackSharp.PackingRectangle@,RectpackSharp.PackingHints,System.Double,System.UInt32,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Finds a way to pack all the given rectangles into a single bin. Performance can be traded for
            space efficiency by using the optional parameters.
            </summary>
            <param name="rectangles">The rectangles to pack. The result is saved onto this array.</param>
            <param name="bounds">The bounds of the resulting bin. This will always be at X=Y=0.</param>
            <param name="packingHint">Specifies hints for optimizing performance.</param>
            <param name="acceptableDensity">Searching stops once a bin is found with this density (usedArea/boundsArea) or better.</param>
            <param name="stepSize">The amount by which to increment/decrement size when trying to pack another bin.</param>
            <param name="maxBoundsWidth">The maximum allowed width for the resulting bin, or null for no limit.</param>
            <param name="maxBoundsHeight">The maximum allowed height for the resulting bin, or null for no limit.</param>
            <remarks>
            The <see cref="F:RectpackSharp.PackingRectangle.Id"/> values are never touched. Use this to identify your rectangles.
            </remarks>
        </member>
        <member name="M:RectpackSharp.RectanglePacker.TryFindBestBin(System.Collections.Generic.List{RectpackSharp.PackingRectangle},RectpackSharp.PackingRectangle[]@,RectpackSharp.PackingRectangle[]@,System.UInt32,System.UInt32,System.UInt32,System.UInt32,RectpackSharp.PackingRectangle@)">
            <summary>
            Tries to find a solution with the smallest bin size possible, packing
            the rectangles in the order in which the were provided.
            </summary>
            <param name="emptySpaces">The list of empty spaces for reusing.</param>
            <param name="rectangles">The rectangles to pack. Might get swapped with "tmpArray".</param>
            <param name="tmpArray">A temporary array the function needs. Might get swapped with "rectangles".</param>
            <param name="binWidth">The maximum bin width to try.</param>
            <param name="binHeight">The maximum bin height to try.</param>
            <param name="stepSize">The amount by which to increment/decrement size when trying to pack another bin.</param>
            <param name="acceptableArea">Stops searching once a bin with this area or less is found.</param>
            <param name="bounds">The bounds of the resulting bin (0, 0, width, height).</param>
            <returns>Whether a solution was found.</returns>
        </member>
        <member name="M:RectpackSharp.RectanglePacker.TryPackAsOrdered(System.Collections.Generic.List{RectpackSharp.PackingRectangle},System.Span{RectpackSharp.PackingRectangle},System.Span{RectpackSharp.PackingRectangle},System.UInt32,System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>
            Tries to pack the rectangles in the given order into a bin of the specified size.
            </summary>
            <param name="emptySpaces">The list of empty spaces for reusing.</param>
            <param name="unpacked">The unpacked rectangles.</param>
            <param name="packed">Where the resulting rectangles will be written.</param>
            <param name="binWidth">The width of the bin.</param>
            <param name="binHeight">The height of the bin.</param>
            <param name="boundsWidth">The width of the resulting bin.</param>
            <param name="boundsHeight">The height of the resulting bin.</param>
            <returns>Whether the operation succeeded.</returns>
            <remarks>The unpacked and packed spans can be the same.</remarks>
        </member>
        <member name="M:RectpackSharp.RectanglePacker.TryFindBestSpace(RectpackSharp.PackingRectangle@,System.Collections.Generic.List{RectpackSharp.PackingRectangle},System.Int32@)">
            <summary>
            Tries to find the best empty space that can fit the given rectangle.
            </summary>
            <param name="rectangle">The rectangle to find a space for.</param>
            <param name="emptySpaces">The list with the empty spaces.</param>
            <param name="index">The index of the space found.</param>
            <returns>Whether a suitable space was found.</returns>
        </member>
        <member name="M:RectpackSharp.RectanglePacker.GetList(System.Int32)">
            <summary>
            Gets a list of rectangles that can be used for empty spaces.
            </summary>
            <param name="preferredCapacity">If a list has to be created, this is used as initial capacity.</param>
        </member>
        <member name="M:RectpackSharp.RectanglePacker.ReturnList(System.Collections.Generic.List{RectpackSharp.PackingRectangle})">
            <summary>
            Returns a list so it can be used in future pack operations. The list should
            no longer be used after returned.
            </summary>
        </member>
        <member name="M:RectpackSharp.RectanglePacker.AddSorted(System.Collections.Generic.List{RectpackSharp.PackingRectangle},RectpackSharp.PackingRectangle)">
            <summary>
            Adds a rectangle to the list in sorted order.
            </summary>
        </member>
        <member name="M:RectpackSharp.RectanglePacker.EnsureSorted(System.Collections.Generic.List{RectpackSharp.PackingRectangle},System.Int32)">
            <summary>
            Updates an item's SortKey and ensures it is in the correct sorted position.
            If it's not, it is moved to the correct position.
            </summary>
            <remarks>If an item needs to be moved, it will only be moved forward. Never backwards.</remarks>
        </member>
        <member name="M:RectpackSharp.RectanglePacker.CalculateTotalArea(System.ReadOnlySpan{RectpackSharp.PackingRectangle})">
            <summary>
            Calculates the sum of the areas of all the given <see cref="T:RectpackSharp.PackingRectangle"/>-s.
            </summary>
        </member>
        <member name="M:RectpackSharp.RectanglePacker.FindBounds(System.ReadOnlySpan{RectpackSharp.PackingRectangle})">
            <summary>
            Calculates the smallest possible rectangle that contains all the given rectangles.
            </summary>
        </member>
        <member name="M:RectpackSharp.RectanglePacker.AnyIntersects(System.ReadOnlySpan{RectpackSharp.PackingRectangle})">
            <summary>
            Returns true if any two different rectangles in the given span intersect.
            </summary>
        </member>
    </members>
</doc>
